---
layout: post
title:      "React with Rails and external API"
date:       2019-05-13 03:48:23 +0000
permalink:  react_with_rails_and_external_api
---


This project is actually something I've wanted to do a long time ago but due to technical difficulty and the requirements for previous project that I can only start to do it now. The idea is very simple: I want an app that can fetch data from a video games database and display the info back to the user. As simple as it sounds, however, executing this idea is far more challenging than it should be. partly because this is the very first time that I try using React with Rails. We previously only learn to do our projects in pure Rails or JavaScript, so being able to get this app done is a huge personal achievement for me.

I knew that there's a very good video game database API out there called IGDB. It's a free API and contains pretty much everything I want for my app. Signing up for the API's key is very simple and straigthforward. Once I've got the key, I need to figure out a way to use it in my app. So, as mentioned before, this is the very first time that I use React with Rails so I was totally clueless on how to set up my app. It's not that simple as just creating new directories for both front end and backend inside the app main directories and somehow, magically, they would recognize each other. There are many tutorials on the Internet for this but I mainly follow the one that was posted on Heroku because it also included the part on how to deploy project on Heroku. I simply followed the steps in this tutorial to create the struture of my app. This was the easiest part of the whole project.

After setting my app, I need to figure out the layout of my app and how it gonna behave. The best tool for this part is draw.io. If you're not familiar with draw.io, it's an amazing website that can be used for creating flowcharts, layouts, and presentation material. It's basically a lovechild of PowerPoint and Adobe Illustrator. The thing that I most appreciate when using draw.io is its huge library of shapes and elements. Using it to create layout for websites is so convienient and simple. I also use it to visualize the structure of my app, such as how many components do I need, how they related to each other, and their responsibilties. Took me a day or two just to get this done, mainly because I wasn't sure what I want my app to do and what it should have to satisfy all the requirements for the project. While this step might seem redundant and unnessary (especially when you've had enough experience with React), it helped me tremendously to clear up any confusion I had with React and Redux. The biggest challenge I faced when learning React and Redux was to understand the purpose of using Redux store, reducers, and presentation components vs. containers. I could save myself so much time changing layout and structure of my app later by spending time putting everything together now on my draw diagram. I believe this is a very good practice and I should keep doing this for all my projects in the future. 

Using my diagram, I start adding components for my app. First I created an index.js file and an App.js file. The index.js file serves the purpose of telling my app what to render and where to render. It also hold the code for Provider which will be the bridge between React and Redux store. The App.js file, on the other hand, is the root component of my app
and where I route up all my components. Inside App.js is where I import my NavBar and my Home components. They are presentation components and only to display info, links and buttons and the likes. 
I then moved on to create the action creators and the reducers. This part is very tricky, mainly because I'm using Rails as an API and I also use another API to fetch data, so I had to figure out where I want to call the external API. At first I want to put the API calls to the action creators because it's easier but then I would risk exposing my key. With the help of my cohort lead, I tried to use dotenv to create an app variable for my key but it wouldn't work somehow, and I then learned from the Internet that I can't really hide API keys in client side. So my best bet now is to put the API calls in server side and have my action creators in client to call my server for the fetched data. It was very challenging but super rewarding once I figured out how to do this. Learning how to use an API is realy difficult because each API is different and it was very difficult to find a good tutorial for this matter. I believe that once I got the first API working, the next time would be much easier, however. 

After having my data fetched from the external API and my client sise can access the data from my server, I'm now ready for incorporating everthing I've learned from all the lessons in this course. This is where everthing just "clicked" and really came together. The knowledge that I had in my brain now can really be put to use to create one single app. Components nested inside of componets. Containers have access to Redux store and reducers and passing props down to components, lifecycles and where to call the actions, etc. There was too many things that I learned and re-learned while doing this app that this post could easily become a 10-page essay. But by the end of the day, what's really important is that I feel much more confident with my ability and I feel that I can start looking for employment. There are, of course, things that I'm not fully satisfied with and features that I could've implemented in this app, but I'm ready to move on and would just add more styling to its appearance. This project might not be that complex but the amount of time and effort that I spent doing it is far greater than any other projects I've done so far and I feel very proud of myself for being able to get it done.

