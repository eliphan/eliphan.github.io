---
layout: post
title:      "First Project"
date:       2019-01-05 03:49:08 +0000
permalink:  first_project
---


Now that I'm (sort of) done with my first project, let's talk about it. 

First of all, I was totally lost when looking for which website I want to scrape. There are literally thousands of websites out there, so how can I choose one? My cohort leader was kind enough to give me the list of JSON database for many mainstream websites. While the list was very extensive, none of them actually caught my attention. It took me a few days just to get an idea of how I want my app be. Then it hit me when I was browsing through the wiki page while playing "Stardew Valley" - a brilliant indie videogame in which you can be a farmer and date other villagers in your small town. I found myself having to go through the list of villagers to find which gift they like and I wish that I can just type their name and automatically get the list of their preference. Now that's a good idea for a new website, or in this case, a new app. It's a very ambitious goal and I don't plan to get it done this time. Instead, I just go for simply scrapping the game's wiki page for the list of villagers for this project. 

I spent 3 days just to set up a local environment on my computer. I follow the instruction for VirtualBox, got it running on my computer, and promptly remove it the next hour as I was not comfortable with using it. I eventually managed to get Atom and Ruby installed, then getting all the gems I need for this project, and finally I can start working on the actual project.   

I believe the hardest part of this project is to set up the structure of the gem. It's my first time using bundler and setting up all the require files so it took me more time than it should just to figure out how to set them up correctly. Once it done, I looked at the restaurant gem example to make sure that my structure is right, and to learn how to set up the require files. I played with "require" and "require_relative" a bit in my bin and lib folder. So far, "require_relative" seems to work better and is easier to control as long as I know the path to the required file. For this project, I set up my app with three classes: one for scraping the data from the website, one for storing the data, and one for interactive with the user. 

For my scraper class, I tried to break my codes into short, readable methods instead of long, complicated ones so it would be easier to read and follow. I had to play with nokogiri a lot to dig into the correct layer of information required for this app. Fortunately I found one very helpful website that list all of the method for parsing html files. After parsing the website and getting the correct data, I use that data to create new objects in my Villagers class - my storing class. The new objects are stored in an array that would later on allow me to filter and do more things with the raw data I got from the website. Now my codes are safe and would always work even if the website change their layout or their database, which they would eventually do. Instead of having to fix my codes later, I can just simply use Nokogiri to get the data again. This is why we should always have a separated scraper class.

I have the class method .all which contain all of my newly created objects. Each villager is stored as an unique object that allow me to find and list when called in my CLI class. The CLI class is very simple and straigh forward: the user can choose to list all villagers or find the link for a villager of their choice. To list all villagers, I call the class method .all in the Villager class, then use the .each method to infiltrate the @@all array to put out the name of all villagers. To find a specific villager, I prompt the user to input the villager's name to search for that name in my @@all array. I would need a method that would return true or false so I use the method detect for this purpost. If it's true that there's an object whose name match the user's input,  the command line would return to the user the name and link to the wiki for said villager. If there's no match, it would prompt the user to choose again. 

This project is the very first one I got for my course so there was a lot of troubles that I encountered while doing it. It really strengthened my knowledge of object-oriented Ruby. It was very challenging and frustrating at times, especially over the break where no one is available to help and Google can be more or less helpful depend on how specific my question is. I didn't have the time and resources to fully making my app the way I originally wanted, but I certainly learned a lot on how to set up a local environment, how to create and install gems, and how to refactoring my codes to make them more elegant. 
