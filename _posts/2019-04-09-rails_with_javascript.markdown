---
layout: post
title:      "Rails with JavaScript"
date:       2019-04-10 02:59:56 +0000
permalink:  rails_with_javascript
---

aka the most confusing project so far.

For this project, I used the app I've created previously with Rails and added Javasrcipt on top of it. Since I've had almost everything laid out and fully functioning, I should have no problem doing it, right? The answer is: "No!" 
This project confused me so much, much more than I'd ever wanted to admit. After getting used to Ruby, a developer-friendly language, switching to JavaScript is not easy. 

First of all, I have to build a construction function and prototype for my Review class. The contruction function is very similar to initializer in Ruby. You basically create a JavaScript object with atttributes from the passed in data. This is similar to how Ruby instances have atttributes. Honestly, I still don't think I fully understand how prototype works, but it's more or less taking the object newly-created JavaScript object and use some functions on it. This way, the same function will be applied to all of our objects.
I also created some serializers for some of my classes using the serialzer gem. This by far is the easiest thing to do for this project as the serializer generated have very similar syntax as the Models.
The hardest part in doing this project was to have a reviews section using JavaScript. I carefully followed the instruction video and still can't get it done at first. As soon as when I thought I was able to do it, another bug appeared and it became an endless cycle of fixing broken codes. 
First of all, I created a review.js where all my JS codes will be stored. This way I can keep my views clear from having too many <script> tags lying around. Also, having them in a separated file really helps with debugging later on.  This also helped me understand more about the structure of a Rails app with JavaScript. I then create a function for a link in my show page, which when clicked on will render the review section in JSON instead of HTML. I achived this by specifying the respond_to format for the index action in my controller file. Then I added the link to load all the reviews in my book show page. To connect the link and its function, I added a class name for that link and called the class in my function. Also, I need to add another <div> in the page where the reviews will be loaded. The tricky part was to set up the function for it to get the data, render the data in JSON, and append said data to the HTML page. My first problem was that when clicking on the link, it opened a HTML page. I soon realized that it was because I need to add jquery into the manifest file in the asset folder. But after fixing the manifest file, the link still open in HTML. It turned out that I need to move the function prevenDefault() on top before calling ajax to get the data from my link. Doing so will prevent the link to behave normally, which is to open a new HTML page, thus making it render in JSON instead. 
So now I have the page render properly in JSON, I need to iterate into the array of reviews and display each and every of them to the view. The .forEach() function is the perfect solution for this task. Then I append the data retrieved from iterating the Review array simply by chaining .append() to the .forEach() function. However, I think this isn't the ideal solution as I had to include all the <ul> and <li> tags and concated the data with + and " ". All in one single line of code like this: "<ul>" + "<li>" + review.user_username + " " + "said: " + review.content + "</li>" + "</ul>". Needless to say it's super messy and will be a pain to fix later on if I decide to add or change anything. But this was the best solution I could find for now, as using remote_true and having a partial template for the reviews didn't work. 
So now that my reviews are properly loaded without reloading the page, I soon found out that my reviews can only be loaded after refreshing the entire show page, otherwise clicking on the link would not give me anything. I checked my console and my terminal to make sure that the returned data was correct and the route was indeed working. There was no error anywhere else in my program. So what was the problem that prevent my link to work? It turned out that, by using Rails 5, I need to have turbolinks loaded before running my function. So by adding $(document).on('turbolinks:load', function()) to the begining of my function, my link finally works as supposed to. 
The next thing I need to do is to add the feature to having the show page for my chapters be able to load the next chapter without refreshing the page. I added a link that when clicked will execute the js-next function. It will get and load the id of the next chapter, grab the data from the next chapter and render them as text for the view. This was fairly easy to do as I've learn about this in one of our lessons. 

This project is less complicated compared to the Rails project but by far is the most confusing. Adding the layers of JavaScript on top of Rails created some unexpected behaviors which was very hard to debug as most of the time I didn't even know which part of my codes was the problem. Almost all of my JavaScript codes were copied from either the Learn lessons or on the Internet and I still don't fully understand them. I think the most important thing I learned from doing this project is to know where to look for when having errors and where to put JavaScript codes inside a Rails app. I believe with enough practice I would be able to get more comfortble with JavaScript, but as for now, it's still the most confusing thing I've ever learned.
